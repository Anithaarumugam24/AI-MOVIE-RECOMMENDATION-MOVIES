# -*- coding: utf-8 -*-
"""day 1_python_for_ds

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F0rko2dRk0c3IkiXHMd_C57FS54d12KR
"""



print("hello,excite to start data science ")

customer_name="john doe"
customer_age=28
customer_balance=120.75
print("customer:",customer_name)
print("age:",customer_age)
print("balance:",customer_balance)

product_price=200
discount=product_price*0.10
final_price=product_price-discount
print("final price after discount:",final_price)

import numpy as np
sales= np.array([150,200,250,300,400,350,500])
print("sales data:",sales)

print("average sale:",np.mean (sales))
print("highest sale:",np.max(sales))
print("lowest sale:",np.min(sales))

import pandas as pd
data={"customer":["alice","bob","clarlie"],"age":[25,30,35],"amount spent":[120,200,150]}
df=pd.DataFrame(data)
print(df)

from google.colab import files
uploaded = files.upload() # Corrected the typo from 'upoload' to 'upload'
df = pd.read_csv("customer_data.csv")
df.head()



import pandas as pd
df=pd.DataFrame({
    "Amount Spent":[200.250,300,400]
    })
high_spenders = df[df["Amount Spent"] > 150]
print(high_spenders)



df_sorted=df.sort_values(by="Amount Spent",ascending=False)
print(df_sorted)

df["Loyalty Points"]=df["Amount Spent"]
print(df)

df.to_csv("cleaned_customer_data.csv",index=False)
files.download("cleaned_customer_data.csv")

import pandas as pd
df = pd.DataFrame({
    "Amount Spent": [200, 250, 300, 400]
})
print(df.isnull().sum())

df_cleaned = df.dropna()
print(df_cleaned)

df["Age"].fillna(df["Age"].mean(), inplace=True)
df["Marks"].fillna(df["Marks"].median(), inplace=True)
df["Attendance"].fillna(df["Attendance"].mean(),
inplace=True)

import pandas as pd

df = pd.DataFrame({
    "Amount Spent": [200, 250, 300, 400],
    "Age": [25, 30, None, 35],  # Added Age column with a missing value
    "Marks": [80, 90, 85, None], # Added Marks column with a missing value
    "Attendance": [90, 95, None, 92] # Added Attendance column with a missing value
})

print(df.isnull().sum())

df["Age"].fillna(df["Age"].mean(), inplace=True)
df["Marks"].fillna(df["Marks"].median(), inplace=True)
df["Attendance"].fillna(df["Attendance"].mean(), inplace=True)

print(df)

if 'Passed' not in df.columns:
    df['Passed'] = False


df["Passed"].fillna(df["Passed"].mode()[0], inplace=True)

df.ffill(inplace=True)
df.bfill(inplace=True)

df.drop_duplicates(inplace=True)

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
df_scaled = df.copy()
df_scaled[["Marks", "Attendance"]] =
scaler.fit_transform(df[["Marks", "Attendance"]])
print(df_scaled)

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
df_scaled = df.copy()
df_scaled[["Marks", "Attendance"]] = scaler.fit_transform(df[["Marks", "Attendance"]])
print(df_scaled)

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
df_scaled[["Marks", "Attendance"]] = scaler.fit_transform(df[["Marks", "Attendance"]])
print(df_scaled)

df_encoded = pd.get_dummies(df, columns=["Passed"],
drop_first=True)
print(df_encoded)

from sklearn.preprocessing import LabelEncoder
encoder = LabelEncoder()
df["Passed"] = encoder.fit_transform(df["Passed"])
print(df)

def performance_category(marks):
    if marks >= 85:
        return "High"
    elif marks >= 70:
        return "Medium"
    else:
        return "Low"

df["Performance"] = df["Marks"].apply(performance_category)
print(df)

df["Age_Group"] = pd.cut(df["Age"], bins=[18, 21, 24],
labels=["Young", "Adult"])
print(df)

import matplotlib.pyplot as plt
import numpy as np

x = np.linspace(0, 10, 100)
y = np.sin(x)

plt.plot(x, y, label="Sine Wave")
plt.xlabel("X Axis")
plt.ylabel("Y Axis")
plt.title("Simple Line Plot")
plt.legend()
plt.show()

categories = ['A', 'B', 'C', 'D']
values = [10, 25, 15, 30]

plt.figure(figsize=(6, 4))
plt.bar(categories, values, color='purple')
plt.xlabel("Categories")
plt.ylabel("Values")
plt.title("Bar Chart Example")
plt.show()

plt.figure(figsize=(7, 5))
plt.hist(data, bins=30, color='green', edgecolor='black', alpha=0.7)
plt.xlabel("Value")
plt.ylabel("Frequency")
plt.title("Histogram Example")
plt.show()

import seaborn as sns
import pandas as pd

# Creating sample data
data = np.random.randn(1000)
df = pd.DataFrame(data, columns=['Values'])

# Plot
sns.histplot(df['Values'], bins=30, kde=True, color='blue')
plt.title("Histogram with KDE")
plt.show()

tips = sns.load_dataset('tips')

plt.figure(figsize=(6, 4))
sns.boxplot(x=tips['total_bill'])
plt.title("Box Plot of Total Bill")
plt.show()

sns.pairplot(tips, hue='sex')
plt.show()

import seaborn as sns
import pandas as pd

tips = sns.load_dataset('tips')

# Convert 'sex' column to numerical using one-hot encoding
tips = pd.get_dummies(tips, columns=['sex'], drop_first=True)

# Before calculating correlation, select only numerical columns
numerical_cols = tips.select_dtypes(include=['number']).columns
corr_matrix = tips[numerical_cols].corr()

plt.figure(figsize=(7, 5))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Correlation Heatmap")
plt.show()

import plotly.express as px

df = pd.DataFrame({
    "x": np.linspace(0, 10, 100),
    "y": np.sin(np.linspace(0, 10, 100))
})

fig = px.line(df, x='x', y='y', title="Interactive Sine Wave")
fig.show()

fig = px.scatter(tips, x='total_bill', y='tip', color='sex_Female', size='size', title="Total Bill vs Tip")
fig.show()

import plotly.graph_objects as go

fig = go.Figure(data=[go.Scatter3d(
    x=tips['total_bill'],
    y=tips['tip'],
    z=tips['size'],
    mode='markers',
    marker=dict(size=5, color=tips['total_bill'], colorscale='Viridis')
)])

fig.update_layout(title="3D Scatter Plot of Total Bill, Tip & Size")
fig.show()